/*! For license information please see bundle.js.LICENSE.txt */
!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ChatWidget=e():n.ChatWidget=e()}(this,(()=>(()=>{var __webpack_modules__={"./src/index.js":()=>{eval("const CONVERSATION_UUID_KEY = 'chat_conversation_uuid';\nlet conversationUuid = localStorage.getItem(CONVERSATION_UUID_KEY);\nlet API_BASE_URL = '';\nlet socket = null; // WebSocket连接\nlet currentLanguage = 'zh'; // 默认语言\n\n// 国际化文本配置\nconst I18N_TEXTS = {\n    zh: {\n        supportChat: 'Support Chat',\n        inputPlaceholder: '输入您的消息...',\n        sendButton: '发送',\n        newConversationButton: '开始新会话',\n        // 系统消息\n        conversationExpired: '会话已失效，正在重新连接...',\n        conversationClosed: '此会话已关闭，无法发送新消息',\n        messageSendFailed: '消息发送失败，请稍后重试',\n        sourceNotFound: '来源配置错误，请联系管理员',\n        invalidParams: '参数错误，请检查输入内容',\n        unknownError: '发送消息时出现未知错误，请稍后重试',\n        initializingConversation: '正在初始化新会话...',\n        conversationClosedStatus: '此会话已关闭',\n        loadMessagesError: '加载消息时出现错误，请刷新页面重试',\n        newConversationCreated: '新会话已创建，您可以开始对话了'\n    },\n    en: {\n        supportChat: 'Support Chat',\n        inputPlaceholder: 'Type your message...',\n        sendButton: 'Send',\n        newConversationButton: 'Start New Chat',\n        // 系统消息\n        conversationExpired: 'Session expired, reconnecting...',\n        conversationClosed: 'This conversation is closed, cannot send new messages',\n        messageSendFailed: 'Failed to send message, please try again later',\n        sourceNotFound: 'Source configuration error, please contact administrator',\n        invalidParams: 'Parameter error, please check your input',\n        unknownError: 'Unknown error occurred while sending message, please try again later',\n        initializingConversation: 'Initializing new conversation...',\n        conversationClosedStatus: 'This conversation is closed',\n        loadMessagesError: 'Error loading messages, please refresh the page and try again',\n        newConversationCreated: 'New conversation created, you can start chatting now'\n    }\n};\n\n// 获取国际化文本\nfunction t(key) {\n    return I18N_TEXTS[currentLanguage]?.[key] || I18N_TEXTS.zh[key] || key;\n}\n\nasync function createNewConversation(source) {\n    try {\n        const response = await fetch(API_BASE_URL + '/api/v1/chat', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ source })\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.code === 200 && data.data && data.data.uuid) {\n            localStorage.setItem(CONVERSATION_UUID_KEY, data.data.uuid);\n            return data.data.uuid;\n        } else {\n            // 处理创建会话的错误情况\n            if (data.error === 'SOURCE_NOT_FOUND') {\n                console.error('Failed to create conversation: Source not found');\n            } else if (data.error === 'INVALID_PARAMS') {\n                console.error('Failed to create conversation: Invalid parameters');\n            } else {\n                console.error('Failed to create conversation:', data.message || data.msg);\n            }\n            return null;\n        }\n    } catch (error) {\n        console.error('Error creating conversation:', error);\n        return null;\n    }\n}\n\nasync function getMessages(uuid) {\n    try {\n        // 后端现在默认返回最新的消息，不再需要分页参数\n        const response = await fetch(`${API_BASE_URL}/api/v1/chat/${uuid}/messages`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.code === 200 && data.data && data.data.items) {\n            return data.data.items;\n        } else {\n            // 处理会话不存在或已关闭的情况\n            if (data.error === 'CONVERSATION_NOT_FOUND') {\n                console.warn('会话不存在，需要创建新会话');\n                // 清除本地存储的会话UUID\n                localStorage.removeItem(CONVERSATION_UUID_KEY);\n                conversationUuid = null;\n                return { error: 'conversation_not_found' };\n            }\n            if (data.error === 'CONVERSATION_CLOSED') {\n                console.warn('会话已关闭');\n                return { error: 'conversation_closed' };\n            }\n            if (data.error === 'SOURCE_NOT_FOUND') {\n                console.warn('来源不存在');\n                return { error: 'source_not_found' };\n            }\n            if (data.error === 'INVALID_PARAMS') {\n                console.warn('参数错误');\n                return { error: 'invalid_params' };\n            }\n            console.error('Failed to get messages:', data.message);\n            return [];\n        }\n    } catch (error) {\n        console.error('Error getting messages:', error);\n        return [];\n    }\n}\n\nasync function sendMessage(uuid, content) {\n    try {\n        const sender = \"customer\";\n        const response = await fetch(`${API_BASE_URL}/api/v1/chat/messages`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ uuid, content, sender })\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.code === 200 && data.data) {\n            return data.data;\n        } else {\n            // 处理会话不存在或已关闭的情况\n            if (data.error === 'CONVERSATION_NOT_FOUND') {\n                console.warn('会话不存在，需要创建新会话');\n                // 清除本地存储的会话UUID\n                localStorage.removeItem(CONVERSATION_UUID_KEY);\n                conversationUuid = null;\n                return { error: 'conversation_not_found' };\n            }\n            if (data.error === 'CONVERSATION_CLOSED') {\n                console.warn('会话已关闭');\n                return { error: 'conversation_closed' };\n            }\n            if (data.error === 'MESSAGE_SEND_FAILED') {\n                console.warn('消息发送失败');\n                return { error: 'message_send_failed' };\n            }\n            if (data.error === 'SOURCE_NOT_FOUND') {\n                console.warn('来源不存在');\n                return { error: 'source_not_found' };\n            }\n            if (data.error === 'INVALID_PARAMS') {\n                console.warn('参数错误');\n                return { error: 'invalid_params' };\n            }\n            console.error('Failed to send message:', data.message);\n            return null;\n        }\n    } catch (error) {\n        console.error('Error sending message:', error);\n        return null;\n    }\n}\n\n// 主题配置\nconst THEMES = {\n    colorful: {\n        // 彩色渐变主题（现有样式）\n        toggleButton: {\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n            boxShadow: '0 8px 25px rgba(102, 126, 234, 0.4)',\n            hoverBoxShadow: '0 12px 35px rgba(102, 126, 234, 0.6)'\n        },\n        header: {\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n            color: 'white',\n            buttonBackground: 'rgba(255, 255, 255, 0.2)',\n            buttonHoverBackground: 'rgba(255, 255, 255, 0.3)',\n            buttonColor: 'white'\n        },\n        messagesArea: {\n            background: 'linear-gradient(180deg, #f8fafc 0%, #f1f5f9 100%)'\n        },\n        customerMessage: {\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n            color: 'white',\n            boxShadow: '0 4px 12px rgba(102, 126, 234, 0.3)'\n        },\n        agentMessage: {\n            background: '#ffffff',\n            color: '#374151',\n            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.1)',\n            border: '1px solid #e5e7eb'\n        },\n        systemMessage: {\n            background: 'linear-gradient(135deg, #fbbf24 0%, #f59e0b 100%)',\n            color: 'white',\n            boxShadow: '0 4px 12px rgba(251, 191, 36, 0.3)'\n        },\n        sendButton: {\n            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',\n            hoverBoxShadow: '0 8px 25px rgba(102, 126, 234, 0.4)'\n        },\n        agentAvatar: {\n            background: 'linear-gradient(135deg, #10b981 0%, #059669 100%)',\n            boxShadow: '0 2px 8px rgba(16, 185, 129, 0.3)'\n        }\n    },\n    minimal: {\n        // 素色简约主题\n        toggleButton: {\n            background: '#374151',\n            boxShadow: '0 4px 12px rgba(55, 65, 81, 0.3)',\n            hoverBoxShadow: '0 6px 20px rgba(55, 65, 81, 0.4)'\n        },\n        header: {\n            background: '#f9fafb',\n            color: '#374151',\n            borderBottom: '1px solid #e5e7eb',\n            buttonBackground: 'rgba(55, 65, 81, 0.1)',\n            buttonHoverBackground: 'rgba(55, 65, 81, 0.2)',\n            buttonColor: '#374151'\n        },\n        messagesArea: {\n            background: '#ffffff'\n        },\n        customerMessage: {\n            background: '#374151',\n            color: 'white',\n            boxShadow: '0 2px 4px rgba(55, 65, 81, 0.1)'\n        },\n        agentMessage: {\n            background: '#f3f4f6',\n            color: '#374151',\n            boxShadow: 'none',\n            border: '1px solid #e5e7eb'\n        },\n        systemMessage: {\n            background: '#f59e0b',\n            color: 'white',\n            boxShadow: '0 2px 4px rgba(245, 158, 11, 0.2)'\n        },\n        sendButton: {\n            background: '#374151',\n            hoverBoxShadow: '0 4px 12px rgba(55, 65, 81, 0.3)'\n        },\n        agentAvatar: {\n            background: '#6b7280',\n            boxShadow: '0 2px 4px rgba(107, 114, 128, 0.2)'\n        }\n    }\n};\n\nasync function initializeChatWidget(options) {\n    let baseUrl = 'http://localhost:8888'; // Default value\n    let source = 'widget'; // Default value\n    let theme = 'colorful'; // Default theme\n    let language = 'zh'; // Default language\n\n    if (options) {\n        if (options.baseUrl) {\n            baseUrl = options.baseUrl;\n        }\n        if (options.source) {\n            source = options.source;\n        }\n        if (options.theme && THEMES[options.theme]) {\n            theme = options.theme;\n        }\n        if (options.language && (options.language === 'zh' || options.language === 'en')) {\n            language = options.language;\n            currentLanguage = language;\n        }\n    }\n\n    const currentTheme = THEMES[theme];\n    API_BASE_URL = baseUrl;\n\n    if (!conversationUuid) {\n        console.log('No conversation UUID found, creating a new one...');\n        conversationUuid = await createNewConversation(source);\n        if (!conversationUuid) {\n            console.error('Could not initialize chat widget: Failed to create conversation.');\n            return;\n        }\n    }\n    console.log('Conversation UUID:', conversationUuid);\n    \n    // 初始化WebSocket连接\n    initWebSocket();\n\n    // Here you would typically render your chat widget UI\n    // For now, let's just add a simple indicator\n    // Check if the chat container already exists to prevent multiple creations\n    let chatContainer = document.getElementById('chat-widget-container');\n    let toggleButton    = document.getElementById('chat-toggle-button');\n    if (!chatContainer) {\n        chatContainer = document.createElement('div');\n        chatContainer.id = 'chat-widget-container';\n        chatContainer.style.cssText = `\n            position: fixed;\n            bottom: 24px;\n            right: 24px;\n            width: 360px;\n            height: 500px;\n            background: #ffffff;\n            border: none;\n            border-radius: 16px;\n            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15), 0 8px 25px rgba(0, 0, 0, 0.1);\n            z-index: 1000;\n            display: flex;\n            flex-direction: column;\n            overflow: hidden;\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n            backdrop-filter: blur(10px);\n            border: 1px solid rgba(255, 255, 255, 0.2);\n        `;\n        \n        // Add CSS animations\n        const style = document.createElement('style');\n        style.textContent = `\n            @keyframes slideInUp {\n                from {\n                    transform: translateY(100%);\n                    opacity: 0;\n                }\n                to {\n                    transform: translateY(0);\n                    opacity: 1;\n                }\n            }\n            \n            @keyframes fadeIn {\n                from { opacity: 0; }\n                to { opacity: 1; }\n            }\n            \n            @keyframes messageSlideIn {\n                from {\n                    transform: translateY(20px);\n                    opacity: 0;\n                }\n                to {\n                    transform: translateY(0);\n                    opacity: 1;\n                }\n            }\n        `;\n        document.head.appendChild(style);\n        document.body.appendChild(chatContainer);\n\n        // Add a button to toggle chat visibility\n        toggleButton = document.createElement('button');\n        toggleButton.id = 'chat-toggle-button';\n        toggleButton.innerHTML = `\n            <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M20 2H4C2.9 2 2 2.9 2 4V22L6 18H20C21.1 18 22 17.1 22 16V4C22 2.9 21.1 2 20 2ZM20 16H5.17L4 17.17V4H20V16Z\" fill=\"currentColor\"/>\n                <circle cx=\"7\" cy=\"10\" r=\"1\" fill=\"currentColor\"/>\n                <circle cx=\"12\" cy=\"10\" r=\"1\" fill=\"currentColor\"/>\n                <circle cx=\"17\" cy=\"10\" r=\"1\" fill=\"currentColor\"/>\n            </svg>\n        `;\n        toggleButton.style.cssText = `\n            position: fixed;\n            bottom: 24px;\n            right: 24px;\n            width: 56px;\n            height: 56px;\n            border-radius: 50%;\n            background: ${currentTheme.toggleButton.background};\n            color: white;\n            border: none;\n            box-shadow: ${currentTheme.toggleButton.boxShadow};\n            cursor: pointer;\n            z-index: 1001;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n        `;\n        \n        // Add hover effects\n        toggleButton.addEventListener('mouseenter', () => {\n            toggleButton.style.transform = 'scale(1.1)';\n            toggleButton.style.boxShadow = currentTheme.toggleButton.hoverBoxShadow;\n        });\n        \n        toggleButton.addEventListener('mouseleave', () => {\n            toggleButton.style.transform = 'scale(1)';\n            toggleButton.style.boxShadow = currentTheme.toggleButton.boxShadow;\n        });\n        \n        toggleButton.onclick = () => {\n            chatContainer.style.display = 'flex';\n            chatContainer.style.animation = 'slideInUp 0.3s cubic-bezier(0.4, 0, 0.2, 1)';\n            toggleButton.style.display = 'none';\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        };\n        document.body.appendChild(toggleButton);\n\n        // Initially hide the chat window\n        chatContainer.style.display = 'none';\n    }\n\n    chatContainer.innerHTML = `\n        <div style=\"\n            padding: 20px 24px;\n            background: ${currentTheme.header.background};\n            color: ${currentTheme.header.color};\n            font-weight: 600;\n            text-align: center;\n            font-size: 16px;\n            position: relative;\n            border-radius: 16px 16px 0 0;\n            ${currentTheme.header.borderBottom ? `border-bottom: ${currentTheme.header.borderBottom};` : ''}\n        \">\n            <div style=\"display: flex; align-items: center; justify-content: center; gap: 8px;\">\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H11V21H5V3H13V9H21Z\" fill=\"currentColor\"/>\n                </svg>\n                ${t('supportChat')}\n            </div>\n            <div style=\"position: absolute; right: 20px; top: 50%; transform: translateY(-50%); display: flex; gap: 8px;\">\n                <button id=\"minimize-button\" style=\"\n                    background: ${currentTheme.header.buttonBackground};\n                    border: none;\n                    color: ${currentTheme.header.buttonColor};\n                    width: 32px;\n                    height: 32px;\n                    border-radius: 50%;\n                    cursor: pointer;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    transition: all 0.2s ease;\n                    font-size: 18px;\n                \" onmouseover=\"this.style.background='${currentTheme.header.buttonHoverBackground}'\" onmouseout=\"this.style.background='${currentTheme.header.buttonBackground}'\">\n                    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M19 13H5V11H19V13Z\" fill=\"currentColor\"/>\n                    </svg>\n                </button>\n                <button id=\"close-button\" style=\"\n                    background: ${currentTheme.header.buttonBackground};\n                    border: none;\n                    color: ${currentTheme.header.buttonColor};\n                    width: 32px;\n                    height: 32px;\n                    border-radius: 50%;\n                    cursor: pointer;\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    transition: all 0.2s ease;\n                    font-size: 18px;\n                \" onmouseover=\"this.style.background='${currentTheme.header.buttonHoverBackground}'\" onmouseout=\"this.style.background='${currentTheme.header.buttonBackground}'\">\n                    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M19 6.41L17.59 5L12 10.59L6.41 5L5 6.41L10.59 12L5 17.59L6.41 19L12 13.41L17.59 19L19 17.59L13.41 12L19 6.41Z\" fill=\"currentColor\"/>\n                    </svg>\n                </button>\n            </div>\n        </div>\n        <div id=\"messages-container\" style=\"\n            flex-grow: 1;\n            padding: 20px;\n            overflow-y: auto;\n            background: ${currentTheme.messagesArea.background};\n            scroll-behavior: smooth;\n        \"></div>\n        <div style=\"\n            padding: 20px;\n            border-top: 1px solid rgba(0, 0, 0, 0.05);\n            display: flex;\n            align-items: center;\n            background: #ffffff;\n            gap: 12px;\n            border-radius: 0 0 16px 16px;\n        \">\n            <input type=\"text\" id=\"message-input\" style=\"\n                flex-grow: 1;\n                padding: 12px 16px;\n                border: 2px solid #e2e8f0;\n                border-radius: 24px;\n                font-size: 14px;\n                outline: none;\n                transition: all 0.2s ease;\n                background: #f8fafc;\n            \" placeholder=\"${t('inputPlaceholder')}\" onfocus=\"this.style.borderColor='#667eea'; this.style.background='#ffffff'\" onblur=\"this.style.borderColor='#e2e8f0'; this.style.background='#f8fafc'\">\n            <button id=\"send-button\" style=\"\n                padding: 12px 20px;\n                background: ${currentTheme.sendButton.background};\n                color: white;\n                border: none;\n                border-radius: 24px;\n                cursor: pointer;\n                font-size: 14px;\n                font-weight: 500;\n                transition: all 0.2s ease;\n                display: flex;\n                align-items: center;\n                gap: 6px;\n                min-width: 80px;\n                justify-content: center;\n            \" onmouseover=\"this.style.transform='translateY(-1px)'; this.style.boxShadow='${currentTheme.sendButton.hoverBoxShadow}'\" onmouseout=\"this.style.transform='translateY(0)'; this.style.boxShadow='none'\">\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M2.01 21L23 12L2.01 3L2 10L17 12L2 14L2.01 21Z\" fill=\"currentColor\"/>\n                </svg>\n                ${t('sendButton')}\n            </button>\n        </div>\n    `;\n\n    const messagesContainer = chatContainer.querySelector('#messages-container');\n    const messageInput = chatContainer.querySelector('#message-input');\n    const sendButton = chatContainer.querySelector('#send-button');\n    const closeButton = chatContainer.querySelector('#close-button');\n\n    const minimizeButton = chatContainer.querySelector('#minimize-button');\n\n    // 最小化按钮事件 - 收起聊天窗口\n    minimizeButton.onclick = () => {\n        chatContainer.style.animation = 'slideInUp 0.3s cubic-bezier(0.4, 0, 0.2, 1) reverse';\n        setTimeout(() => {\n            chatContainer.style.display = 'none';\n            toggleButton.style.display = 'flex';\n            toggleButton.style.animation = 'fadeIn 0.2s ease-out';\n        }, 250);\n    };\n\n    // 关闭按钮事件 - 完全关闭聊天窗口\n    closeButton.onclick = () => {\n        chatContainer.style.animation = 'slideInUp 0.3s cubic-bezier(0.4, 0, 0.2, 1) reverse';\n        setTimeout(() => {\n            chatContainer.style.display = 'none';\n            toggleButton.style.display = 'none';\n            toggleButton.style.animation = 'fadeIn 0.2s ease-out';\n        }, 250);\n    };\n\n    function addMessageToChat(message) {\n        const messageElement = document.createElement('div');\n        messageElement.style.cssText = `\n            margin-bottom: 16px;\n            display: flex;\n            justify-content: ${message.sender === 'customer' ? 'flex-end' : 'flex-start'};\n            animation: messageSlideIn 0.3s ease-out;\n        `;\n        \n        const isCustomer = message.sender === 'customer';\n        const isSystem = message.sender === 'system';\n        \n        let bubbleStyle, avatarHtml = '';\n        \n        if (isSystem) {\n            bubbleStyle = `\n                background: ${currentTheme.systemMessage.background};\n                color: ${currentTheme.systemMessage.color};\n                padding: 12px 16px;\n                border-radius: 16px;\n                max-width: 85%;\n                word-wrap: break-word;\n                box-shadow: ${currentTheme.systemMessage.boxShadow};\n                font-size: 13px;\n                text-align: center;\n                font-weight: 500;\n            `;\n        } else if (isCustomer) {\n            bubbleStyle = `\n                background: ${currentTheme.customerMessage.background};\n                color: ${currentTheme.customerMessage.color};\n                padding: 12px 16px;\n                border-radius: 18px 18px 4px 18px;\n                max-width: 75%;\n                word-wrap: break-word;\n                box-shadow: ${currentTheme.customerMessage.boxShadow};\n                font-size: 14px;\n                line-height: 1.4;\n            `;\n        } else {\n            // Agent message\n            bubbleStyle = `\n                background: ${currentTheme.agentMessage.background};\n                color: ${currentTheme.agentMessage.color};\n                padding: 12px 16px;\n                border-radius: 18px 18px 18px 4px;\n                max-width: 75%;\n                word-wrap: break-word;\n                ${currentTheme.agentMessage.boxShadow ? `box-shadow: ${currentTheme.agentMessage.boxShadow};` : ''}\n                ${currentTheme.agentMessage.border ? `border: ${currentTheme.agentMessage.border};` : ''}\n                font-size: 14px;\n                line-height: 1.4;\n            `;\n            \n            avatarHtml = `\n                <div style=\"\n                    width: 32px;\n                    height: 32px;\n                    border-radius: 50%;\n                    background: ${currentTheme.agentAvatar.background};\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    margin-right: 8px;\n                    flex-shrink: 0;\n                    box-shadow: ${currentTheme.agentAvatar.boxShadow};\n                \">\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M12 2C13.1 2 14 2.9 14 4C14 5.1 13.1 6 12 6C10.9 6 10 5.1 10 4C10 2.9 10.9 2 12 2ZM12 14.9C10.8 14.9 9.8 15.9 9.8 17.1C9.8 18.3 10.8 19.3 12 19.3C13.2 19.3 14.2 18.3 14.2 17.1C14.2 15.9 13.2 14.9 12 14.9ZM21 9V7L15 1H5C3.89 1 3 1.89 3 3V21C3 22.11 3.89 23 5 23H19C20.11 23 21 22.11 21 21V9H21Z\" fill=\"white\"/>\n                    </svg>\n                </div>\n            `;\n        }\n        \n        messageElement.innerHTML = `\n            ${isSystem ? avatarHtml : ''}\n            <div style=\"${bubbleStyle}\">\n                ${message.content}\n            </div>\n        `;\n        \n        messagesContainer.appendChild(messageElement);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    sendButton.onclick = async () => {\n        const content = messageInput.value.trim();\n        if (content && conversationUuid) {\n            // Display user's message immediately\n            addMessageToChat({ content: content, sender: 'customer' });\n            messageInput.value = '';\n            const sentMessage = await sendMessage(conversationUuid, content);\n            \n            // 处理发送消息的错误情况\n            if (sentMessage && sentMessage.error) {\n                if (sentMessage.error === 'conversation_not_found') {\n                    // 会话不存在，尝试创建新会话\n                    addMessageToChat({ \n                        content: t('conversationExpired'), \n                        sender: 'system' \n                    });\n                    // 重新初始化会话\n                    const newUuid = await createNewConversation(source || 'widget');\n                    if (newUuid) {\n                        conversationUuid = newUuid;\n                        initWebSocket();\n                        // 重新发送消息\n                        await sendMessage(conversationUuid, content);\n                    }\n                } else if (sentMessage.error === 'conversation_closed') {\n                    addMessageToChat({ \n                        content: t('conversationClosed'), \n                        sender: 'system' \n                    });\n                    // 显示新建会话按钮\n                    showNewConversationButton();\n                } else if (sentMessage.error === 'message_send_failed') {\n                    addMessageToChat({ \n                        content: t('messageSendFailed'), \n                        sender: 'system' \n                    });\n                } else if (sentMessage.error === 'source_not_found') {\n                    addMessageToChat({ \n                        content: t('sourceNotFound'), \n                        sender: 'system' \n                    });\n                } else if (sentMessage.error === 'invalid_params') {\n                    addMessageToChat({ \n                        content: t('invalidParams'), \n                        sender: 'system' \n                    });\n                } else {\n                    addMessageToChat({ \n                        content: t('unknownError'), \n                        sender: 'system' \n                    });\n                }\n            }\n        }\n    };\n\n    messageInput.onkeypress = (e) => {\n        if (e.key === 'Enter') {\n            sendButton.click();\n        }\n    };\n\n    // Load existing messages\n    if (conversationUuid) {\n        const messages = await getMessages(conversationUuid);\n        if (messages && messages.error) {\n            if (messages.error === 'conversation_not_found') {\n                // 会话不存在，创建新会话\n                addMessageToChat({ \n                    content: t('initializingConversation'), \n                    sender: 'system' \n                });\n                const newUuid = await createNewConversation(source || 'widget');\n                if (newUuid) {\n                    conversationUuid = newUuid;\n                    initWebSocket();\n                }\n            } else if (messages.error === 'conversation_closed') {\n                addMessageToChat({ \n                    content: t('conversationClosedStatus'), \n                    sender: 'system' \n                });\n                // 显示新建会话按钮\n                showNewConversationButton();\n            } else if (messages.error === 'source_not_found') {\n                addMessageToChat({ \n                    content: t('sourceNotFound'), \n                    sender: 'system' \n                });\n            } else if (messages.error === 'invalid_params') {\n                addMessageToChat({ \n                    content: t('invalidParams'), \n                    sender: 'system' \n                });\n            } else {\n                addMessageToChat({ \n                    content: t('loadMessagesError'), \n                    sender: 'system' \n                });\n            }\n        } else if (Array.isArray(messages)) {\n            messages.forEach(msg => {\n                addMessageToChat(msg);\n            });\n        }\n        // 确保加载消息后滚动到最底部\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    // 新建会话按钮功能\n    function showNewConversationButton() {\n        // 检查是否已经存在新建会话按钮\n        if (document.getElementById('new-conversation-btn')) {\n            return;\n        }\n\n        const newConversationBtn = document.createElement('button');\n        newConversationBtn.id = 'new-conversation-btn';\n        newConversationBtn.textContent = t('newConversationButton');\n        newConversationBtn.style.cssText = `\n            width: 100%;\n            padding: 10px;\n            margin: 10px 0;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 14px;\n        `;\n\n        newConversationBtn.onclick = async () => {\n            // 创建新会话\n            const newUuid = await createNewConversation(source || 'widget');\n            if (newUuid) {\n                conversationUuid = newUuid;\n                // 清空聊天记录\n                messagesContainer.innerHTML = '';\n                // 重新初始化WebSocket\n                initWebSocket();\n                // 移除新建会话按钮\n                newConversationBtn.remove();\n                addMessageToChat({ \n                    content: t('newConversationCreated'), \n                    sender: 'system' \n                });\n            }\n        };\n\n        // 将按钮插入到输入框上方\n        const inputContainer = chatContainer.querySelector('div:last-child');\n        inputContainer.parentNode.insertBefore(newConversationBtn, inputContainer);\n    }\n\n    // 初始化WebSocket连接\n    function initWebSocket() {\n        // 如果已经有连接，先关闭\n        if (socket) {\n            socket.close();\n        }\n\n        // 创建WebSocket连接\n        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n        const wsUrl = `${wsProtocol}//${API_BASE_URL.replace(/^https?:\\/\\//, '')}/api/v1/chat/ws?conv_uuid=${conversationUuid}&client_type=customer`;\n        \n        try {\n            socket = new WebSocket(wsUrl);\n            \n            // 连接打开时\n            socket.onopen = () => {\n                console.log('WebSocket连接已建立');\n            };\n            \n            // 接收消息\n            socket.onmessage = (event) => {\n                try {\n                    const fullMessage = JSON.parse(event.data);\n                    console.log('收到完整消息:', fullMessage);\n                    // 只处理消息类型的数据\n                    if (fullMessage.type === 'new_message') {\n                        // const messageData = JSON.parse(fullMessage.data);\n                        const messageData = fullMessage.data;\n                        console.log('收到新消息:', messageData);\n                        // 如果是客服发送的消息，显示在聊天窗口中\n                        // if (fullMessage.sender === 'agent') {\n                        //     addMessageToChat({ content: messageData.content, sender: 'agent' });\n                        // }\n                        addMessageToChat({ content: messageData.content, sender: 'agent' });\n                    }\n                } catch (e) {\n                    console.error('解析WebSocket消息失败:', e);\n                }\n            };\n            \n            // 连接关闭\n            socket.onclose = () => {\n                console.log('WebSocket连接已关闭');\n                // 可以在这里添加重连逻辑\n                setTimeout(() => {\n                    if (conversationUuid) {\n                        initWebSocket();\n                    }\n                }, 5000); // 5秒后尝试重连\n            };\n            \n            // 连接错误\n            socket.onerror = (error) => {\n                console.error('WebSocket错误:', error);\n            };\n            \n        } catch (error) {\n            console.error('创建WebSocket连接失败:', error);\n        }\n    }\n\n    // Expose functions globally for external access\n    window.ChatWidget = {\n        init: initializeChatWidget,\n        getMessages: getMessages,\n        sendMessage: sendMessage\n    };\n}\n\n// // If the script is loaded asynchronously, initialize it when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // Always initialize the chat widget when DOM is ready with default values\n    // initializeChatWidget({ baseUrl: 'http://192.168.31.214:8888', source: 'CS-4A6euKS8gwMUaqyOWcks' });\n    const globalConfig = window.WIDGET_CONFIG || {};\n    const autoInit = globalConfig.autoInit !== false; // 默认为true，除非明确设置为false\n\n    if (autoInit) {\n        const config = {\n            baseUrl: globalConfig.baseUrl || 'http://192.168.31.214:8888', // 默认值\n            source: globalConfig.source || 'CS-4A6euKS8gwMUaqyOWcks', // 默认值\n            theme: globalConfig.theme || 'colorful',\n            language: globalConfig.language || 'zh' // 默认语言\n        };\n        initializeChatWidget(config);\n    }\n});\n\n//# sourceURL=webpack://ChatWidget/./src/index.js?")}},__webpack_exports__={};return __webpack_modules__["./src/index.js"](),__webpack_exports__})()));