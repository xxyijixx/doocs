/*! For license information please see bundle.js.LICENSE.txt */
!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.ChatWidget=e():n.ChatWidget=e()}(this,(()=>(()=>{var __webpack_modules__={"./src/index.js":()=>{eval("const CONVERSATION_UUID_KEY = 'conversation_uuid';\nlet conversationUuid = localStorage.getItem(CONVERSATION_UUID_KEY);\nlet API_BASE_URL = '';\nlet socket = null; // WebSocket连接\n\nasync function createNewConversation(source) {\n    try {\n        const response = await fetch(API_BASE_URL + '/api/v1/chat', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ source })\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.code === 200 && data.data && data.data.uuid) {\n            localStorage.setItem(CONVERSATION_UUID_KEY, data.data.uuid);\n            return data.data.uuid;\n        } else {\n            console.error('Failed to create conversation:', data.msg);\n            return null;\n        }\n    } catch (error) {\n        console.error('Error creating conversation:', error);\n        return null;\n    }\n}\n\nasync function getMessages(uuid) {\n    try {\n        // 后端现在默认返回最新的消息，不再需要分页参数\n        const response = await fetch(`${API_BASE_URL}/api/v1/chat/${uuid}/messages`);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.code === 200 && data.data && data.data.items) {\n            return data.data.items;\n        } else {\n            // 处理会话不存在或已关闭的情况\n            if (data.message === '对话不存在' || (data.data && data.data.error_code === 'CONVERSATION_NOT_FOUND')) {\n                console.warn('会话不存在，需要创建新会话');\n                // 清除本地存储的会话UUID\n                localStorage.removeItem(CONVERSATION_UUID_KEY);\n                conversationUuid = null;\n                return { error: 'conversation_not_found' };\n            }\n            if (data.message === '对话已关闭' || (data.data && data.data.error_code === 'CONVERSATION_CLOSED')) {\n                console.warn('会话已关闭');\n                return { error: 'conversation_closed' };\n            }\n            console.error('Failed to get messages:', data.message);\n            return [];\n        }\n    } catch (error) {\n        console.error('Error getting messages:', error);\n        return [];\n    }\n}\n\nasync function sendMessage(uuid, content) {\n    try {\n        const sender = \"customer\";\n        const response = await fetch(`${API_BASE_URL}/api/v1/chat/messages`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({ uuid, content, sender })\n        });\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.code === 200 && data.data) {\n            return data.data;\n        } else {\n            // 处理会话不存在或已关闭的情况\n            if (data.message === '对话不存在' || (data.data && data.data.error_code === 'CONVERSATION_NOT_FOUND')) {\n                console.warn('会话不存在，需要创建新会话');\n                // 清除本地存储的会话UUID\n                localStorage.removeItem(CONVERSATION_UUID_KEY);\n                conversationUuid = null;\n                return { error: 'conversation_not_found' };\n            }\n            if (data.message === '对话已关闭' || (data.data && data.data.error_code === 'CONVERSATION_CLOSED')) {\n                console.warn('会话已关闭');\n                return { error: 'conversation_closed' };\n            }\n            console.error('Failed to send message:', data.message);\n            return null;\n        }\n    } catch (error) {\n        console.error('Error sending message:', error);\n        return null;\n    }\n}\n\nasync function initializeChatWidget(options) {\n    let baseUrl = 'http://localhost:8888'; // Default value\n    let source = 'widget'; // Default value\n\n    if (options) {\n        if (options.baseUrl) {\n            baseUrl = options.baseUrl;\n        }\n        if (options.source) {\n            source = options.source;\n        }\n    }\n\n    API_BASE_URL = baseUrl;\n\n    if (!conversationUuid) {\n        console.log('No conversation UUID found, creating a new one...');\n        conversationUuid = await createNewConversation(source);\n        if (!conversationUuid) {\n            console.error('Could not initialize chat widget: Failed to create conversation.');\n            return;\n        }\n    }\n    console.log('Conversation UUID:', conversationUuid);\n    \n    // 初始化WebSocket连接\n    initWebSocket();\n\n    // Here you would typically render your chat widget UI\n    // For now, let's just add a simple indicator\n    // Check if the chat container already exists to prevent multiple creations\n    let chatContainer = document.getElementById('chat-widget-container');\n    if (!chatContainer) {\n        chatContainer = document.createElement('div');\n        chatContainer.id = 'chat-widget-container';\n        chatContainer.style.position = 'fixed';\n        chatContainer.style.bottom = '20px';\n        chatContainer.style.right = '20px';\n        chatContainer.style.width = '320px';\n        chatContainer.style.height = '450px';\n        chatContainer.style.backgroundColor = '#ffffff';\n        chatContainer.style.border = 'none';\n        chatContainer.style.borderRadius = '12px';\n        chatContainer.style.boxShadow = '0 6px 20px rgba(0,0,0,0.15)';\n        chatContainer.style.zIndex = '1000';\n        chatContainer.style.display = 'flex';\n        chatContainer.style.flexDirection = 'column';\n        chatContainer.style.overflow = 'hidden';\n        chatContainer.style.fontFamily = 'Arial, sans-serif';\n        document.body.appendChild(chatContainer);\n\n        // Add a button to toggle chat visibility\n        const toggleButton = document.createElement('button');\n        toggleButton.innerText = '💬';\n        toggleButton.style.position = 'fixed';\n        toggleButton.style.bottom = '30px';\n        toggleButton.style.right = '30px';\n        toggleButton.style.width = '60px';\n        toggleButton.style.height = '60px';\n        toggleButton.style.borderRadius = '50%';\n        toggleButton.style.backgroundColor = '#007bff';\n        toggleButton.style.color = 'white';\n        toggleButton.style.fontSize = '24px';\n        toggleButton.style.border = 'none';\n        toggleButton.style.boxShadow = '0 4px 10px rgba(0,0,0,0.2)';\n        toggleButton.style.cursor = 'pointer';\n        toggleButton.style.zIndex = '1001';\n        toggleButton.onclick = () => {\n            chatContainer.style.display = 'flex';\n            toggleButton.style.display = 'none';\n            messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        };\n        document.body.appendChild(toggleButton);\n\n        // Initially hide the chat window\n        chatContainer.style.display = 'none';\n        toggleButton.innerText = 'Open Chat';\n    }\n\n    chatContainer.innerHTML = `\n        <div style=\"padding: 15px; background-color: #007bff; color: white; border-bottom: 1px solid #0056b3; font-weight: bold; text-align: center; font-size: 16px; position: relative;\">\n            Support Chat\n            <button id=\"close-button\" style=\"position: absolute; right: 15px; top: 50%; transform: translateY(-50%); background: none; border: none; color: white; font-size: 20px; cursor: pointer;\">&times;</button>\n        </div>\n        <div id=\"messages-container\" style=\"flex-grow: 1; padding: 15px; overflow-y: auto; background-color: #f8f9fa;\"></div>\n        <div style=\"padding: 15px; border-top: 1px solid #e9ecef; display: flex; align-items: center; background-color: #f0f2f5;\">\n            <input type=\"text\" id=\"message-input\" style=\"flex-grow: 1; padding: 10px; border: 1px solid #ced4da; border-radius: 20px; font-size: 14px; outline: none;\" placeholder=\"Type your message...\">\n            <button id=\"send-button\" style=\"margin-left: 10px; padding: 10px 15px; background-color: #007bff; color: white; border: none; border-radius: 20px; cursor: pointer; font-size: 14px; transition: background-color 0.2s;\">Send</button>\n        </div>\n    `;\n\n    const messagesContainer = chatContainer.querySelector('#messages-container');\n    const messageInput = chatContainer.querySelector('#message-input');\n    const sendButton = chatContainer.querySelector('#send-button');\n    const closeButton = chatContainer.querySelector('#close-button');\n\n    closeButton.onclick = () => {\n        chatContainer.style.display = 'none';\n        toggleButton.style.display = 'block';\n    };\n\n    function addMessageToChat(message) {\n        const messageElement = document.createElement('div');\n        messageElement.style.marginBottom = '10px';\n        messageElement.style.display = 'flex';\n        messageElement.style.justifyContent = message.sender === 'customer' ? 'flex-end' : 'flex-start';\n        messageElement.innerHTML = `\n            <div style=\"background-color: ${message.sender === 'customer' ? '#dcf8c6' : '#e9ecef'}; color: ${message.sender === 'customer' ? '#333' : '#333'}; padding: 10px 15px; border-radius: 18px; max-width: 75%; word-wrap: break-word; box-shadow: 0 1px 1px rgba(0,0,0,0.05);\">\n                ${message.content}\n            </div>\n        `;\n        messagesContainer.appendChild(messageElement);\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    sendButton.onclick = async () => {\n        const content = messageInput.value.trim();\n        if (content && conversationUuid) {\n            // Display user's message immediately\n            addMessageToChat({ content: content, sender: 'customer' });\n            messageInput.value = '';\n            const sentMessage = await sendMessage(conversationUuid, content);\n            \n            // 处理发送消息的错误情况\n            if (sentMessage && sentMessage.error) {\n                if (sentMessage.error === 'conversation_not_found') {\n                    // 会话不存在，尝试创建新会话\n                    addMessageToChat({ \n                        content: '会话已失效，正在重新连接...', \n                        sender: 'system' \n                    });\n                    // 重新初始化会话\n                    const newUuid = await createNewConversation(source || 'widget');\n                    if (newUuid) {\n                        conversationUuid = newUuid;\n                        initWebSocket();\n                        // 重新发送消息\n                        await sendMessage(conversationUuid, content);\n                    }\n                } else if (sentMessage.error === 'conversation_closed') {\n                    addMessageToChat({ \n                        content: '此会话已关闭，无法发送新消息', \n                        sender: 'system' \n                    });\n                    // 显示新建会话按钮\n                    showNewConversationButton();\n                }\n            }\n        }\n    };\n\n    messageInput.onkeypress = (e) => {\n        if (e.key === 'Enter') {\n            sendButton.click();\n        }\n    };\n\n    // Load existing messages\n    if (conversationUuid) {\n        const messages = await getMessages(conversationUuid);\n        if (messages && messages.error) {\n            if (messages.error === 'conversation_not_found') {\n                // 会话不存在，创建新会话\n                addMessageToChat({ \n                    content: '正在初始化新会话...', \n                    sender: 'system' \n                });\n                const newUuid = await createNewConversation(source || 'widget');\n                if (newUuid) {\n                    conversationUuid = newUuid;\n                    initWebSocket();\n                }\n            } else if (messages.error === 'conversation_closed') {\n                addMessageToChat({ \n                    content: '此会话已关闭', \n                    sender: 'system' \n                });\n                // 显示新建会话按钮\n                showNewConversationButton();\n            }\n        } else if (Array.isArray(messages)) {\n            messages.forEach(msg => {\n                addMessageToChat(msg);\n            });\n        }\n        // 确保加载消息后滚动到最底部\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    // 新建会话按钮功能\n    function showNewConversationButton() {\n        // 检查是否已经存在新建会话按钮\n        if (document.getElementById('new-conversation-btn')) {\n            return;\n        }\n\n        const newConversationBtn = document.createElement('button');\n        newConversationBtn.id = 'new-conversation-btn';\n        newConversationBtn.textContent = '开始新会话';\n        newConversationBtn.style.cssText = `\n            width: 100%;\n            padding: 10px;\n            margin: 10px 0;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            font-size: 14px;\n        `;\n\n        newConversationBtn.onclick = async () => {\n            // 创建新会话\n            const newUuid = await createNewConversation(source || 'widget');\n            if (newUuid) {\n                conversationUuid = newUuid;\n                // 清空聊天记录\n                messagesContainer.innerHTML = '';\n                // 重新初始化WebSocket\n                initWebSocket();\n                // 移除新建会话按钮\n                newConversationBtn.remove();\n                addMessageToChat({ \n                    content: '新会话已创建，您可以开始对话了', \n                    sender: 'system' \n                });\n            }\n        };\n\n        // 将按钮插入到输入框上方\n        const inputContainer = chatContainer.querySelector('div:last-child');\n        inputContainer.parentNode.insertBefore(newConversationBtn, inputContainer);\n    }\n\n    // 初始化WebSocket连接\n    function initWebSocket() {\n        // 如果已经有连接，先关闭\n        if (socket) {\n            socket.close();\n        }\n\n        // 创建WebSocket连接\n        const wsProtocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n        const wsUrl = `${wsProtocol}//${API_BASE_URL.replace(/^https?:\\/\\//, '')}/api/v1/chat/ws?conv_uuid=${conversationUuid}&client_type=customer`;\n        \n        try {\n            socket = new WebSocket(wsUrl);\n            \n            // 连接打开时\n            socket.onopen = () => {\n                console.log('WebSocket连接已建立');\n            };\n            \n            // 接收消息\n            socket.onmessage = (event) => {\n                try {\n                    const fullMessage = JSON.parse(event.data);\n                    console.log('收到完整消息:', fullMessage);\n                    // 只处理消息类型的数据\n                    if (fullMessage.type === 'new_message') {\n                        // const messageData = JSON.parse(fullMessage.data);\n                        const messageData = fullMessage.data;\n                        console.log('收到新消息:', messageData);\n                        // 如果是客服发送的消息，显示在聊天窗口中\n                        // if (fullMessage.sender === 'agent') {\n                        //     addMessageToChat({ content: messageData.content, sender: 'agent' });\n                        // }\n                        addMessageToChat({ content: messageData.content, sender: 'agent' });\n                    }\n                } catch (e) {\n                    console.error('解析WebSocket消息失败:', e);\n                }\n            };\n            \n            // 连接关闭\n            socket.onclose = () => {\n                console.log('WebSocket连接已关闭');\n                // 可以在这里添加重连逻辑\n                setTimeout(() => {\n                    if (conversationUuid) {\n                        initWebSocket();\n                    }\n                }, 5000); // 5秒后尝试重连\n            };\n            \n            // 连接错误\n            socket.onerror = (error) => {\n                console.error('WebSocket错误:', error);\n            };\n            \n        } catch (error) {\n            console.error('创建WebSocket连接失败:', error);\n        }\n    }\n\n    // Expose functions globally for external access\n    window.ChatWidget = {\n        init: initializeChatWidget,\n        getMessages: getMessages,\n        sendMessage: sendMessage\n    };\n}\n\n// // If the script is loaded asynchronously, initialize it when DOM is ready\ndocument.addEventListener('DOMContentLoaded', async () => {\n    // Always initialize the chat widget when DOM is ready with default values\n    // initializeChatWidget({ baseUrl: 'http://192.168.31.214:8888', source: 'CS-4A6euKS8gwMUaqyOWcks' });\n    const globalConfig = window.WIDGET_CONFIG || {};\n    const autoInit = globalConfig.autoInit !== false; // 默认为true，除非明确设置为false\n\n    if (autoInit) {\n        const config = {\n            baseUrl: globalConfig.baseUrl || 'http://192.168.31.214:8888', // 默认值\n            source: globalConfig.source || 'CS-4A6euKS8gwMUaqyOWcks' // 默认值\n        };\n        initializeChatWidget(config);\n    }\n});\n\n//# sourceURL=webpack://ChatWidget/./src/index.js?")}},__webpack_exports__={};return __webpack_modules__["./src/index.js"](),__webpack_exports__})()));